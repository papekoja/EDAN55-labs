use graph_parsing::{parse_gr::parse_gr, parse_td::parse_td};

use crate::algorithm::algorithm;

mod algorithm;
mod graph_parsing;
mod models;

fn main() {
    // let filenames = vec![
    //     "web4",
    //     "WorldMap",
    //     "FibonacciTree_10",
    //     "StarGraph_100",
    //     "TutteGraph",
    //     "DorogovtsevGoltsevMendesGraph",
    //     "HanoiTowerGraph_4_3",
    // ];

    let filenames = vec![
        "AhrensSzekeresGeneralizedQuadrangleGraph_3",
        "BalancedTree_3_5",
        "BarbellGraph_10_5",
        "BidiakisCube",
        "BlanusaFirstSnarkGraph",
        "BlanusaSecondSnarkGraph",
        "BrinkmannGraph",
        "ChvatalGraph",
        "CirculantGraph_20_5",
        "CircularLadderGraph_20",
        "ClebschGraph",
        //"CompleteBipartiteGraph_25_20",
        "CompleteGraph_15",
        "contiki_dhcpc_handle_dhcp",
        "contiki_lpp_dutycycle",
        "contiki_shell-netperf_process_thread_shell_netperf_process",
        "contiki_uip_uip_process",
        "coremark_core_main_main",
        "CoxeterGraph",
        "CycleGraph_100",
        "DesarguesGraph",
        "DodecahedralGraph",
        "DorogovtsevGoltsevMendesGraph",
        "DoubleStarSnark",
        "DurerGraph",
        "DyckGraph",
        "EllinghamHorton54Graph",
        "EllinghamHorton78Graph",
        "empty",
        "eppstein",
        "ErreraGraph",
        "F26AGraph",
        "FibonacciTree_10",
        "FlowerSnark",
        "FolkmanGraph",
        "FranklinGraph",
        "FriendshipGraph_10",
        "FruchtGraph",
        "fuzix_vprintf_vprintf",
        "fuzix_vscanf_vscanf",
        "GeneralizedPetersenGraph_10_4",
        "GoethalsSeidelGraph_2_3",
        "GoldnerHararyGraph",
        //"GossetGraph",
        //"gr-only",
        "GrayGraph",
        "Grid2dGraph_5_5",
        "GrotzschGraph",
        "HanoiTowerGraph_4_3",
        "HararyGraph_6_15",
        "HarborthGraph",
        "HeawoodGraph",
        "HerschelGraph",
        "HexahedralGraph",
        "HoffmanGraph",
        //"HoffmanSingletonGraph",
        "HoltGraph",
        "HortonGrap",
        "HouseGraph",
        "HouseXGraph",
        "HyperStarGraph_10_2",
        "IcosahedralGraph",
        "JohnsonGraph_8_2",
        "KittellGraph",
        "Klein7RegularGraph",
        //"KneserGraph_8_3",
        //"KneserGraph_10_2",
        "KrackhardtKiteGraph",
        "LadderGraph_20",
        "LollipopGraph_7_5",
        "MarkstroemGraph",
        "McGeeGraph",
        "MeredithGraph",
        "MoebiusKantorGraph",
        "MoserSpindle",
        "NauruGraph",
        "NKStarGraph_5_3",
        "NonisotropicOrthogonalPolarGraph_3_5",
        //"NonisotropicUnitaryPolarGraph_3_3",
        "OctahedralGraph",
        "OddGraph_3",
        "OddGraph_4",
        "OrthogonalArrayBlockGraph_4_3",
        "OrthogonalPolarGraph_5_2",
        //"p-num-vertices-larger",
        "PaleyGraph_17",
        "PappusGraph",
        "PasechnikGraph_1",
        //"PasechnikGraph_2",
        "PathGraph_100",
        "PetersenGraph",
        "PoussinGraph",
        "RingedTree_6",
        "RobertsonGraph",
        "SchlaefliGraph",
        "ShrikhandeGraph",
        "SierpinskiGasketGraph_3",
        "SierpinskiGasketGraph_5",
        "single-edge",
        //"single-vertex",
        "SousselierGraph",
        "SquaredSkewHadamardMatrixGraph_1",
        //"SquaredSkewHadamardMatrixGraph_2",
        "StarGraph_100",
        "stdlib_print_format",
        "SwitchedSquaredSkewHadamardMatrixGraph_1",
        //"SwitchedSquaredSkewHadamardMatrixGraph_2",
        "SylvesterGraph",
        //"SymplecticDualPolarGraph_4_3",
        //"SymplecticPolarGraph_4_3",
        "SzekeresSnarkGraph",
        "T2starGeneralizedQuadrangleGraph_2",
        //"T2starGeneralizedQuadrangleGraph_4",
        "TaylorTwographDescendantSRG_3",
        "TaylorTwographSRG_3",
        "TetrahedralGraph",
        "ThomsenGraph",
        "TietzeGraph",
        "Toroidal6RegularGrid2dGraph_4_6",
        "TruncatedTetrahedralGraph",
        "TutteCoxeterGraph",
        "TutteGraph",
        //"two-vertices-2",
        //"two-vertices",
        "WagnerGraph",
        "WatkinsSnarkGraph",
        "web1",
        "web2",
        "web3",
        "web4",
        "wedge",
        "WellsGraph",
        "WheelGraph_100",
        "WienerArayaGraph",
        "WorldMap",
    ];

    for filename in filenames {
        print!("{}: ", filename);
        let graph = parse_gr(&(filename.to_owned() + ".gr"));
        let tree = parse_td(&(filename.to_string() + ".td"));

        // println!("======== .gr ========");
        // println!("{:?}", graph);

        // println!("======== .td ========");
        // tree.print_tree();

        algorithm(&graph, &tree);
    }
}
